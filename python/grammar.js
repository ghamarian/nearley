// Generated automatically by nearley, version 2.16.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

   function flatten(d) {
	return d.concat.apply([], a);	
   }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "main$ebnf$1", "symbols": []},
    {"name": "main$ebnf$1$subexpression$1", "symbols": ["__", "name"]},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1", "main$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "main", "symbols": ["name", "main$ebnf$1"], "postprocess":  d => { 
        	let result = d[1].map(e => e[1])
        	return `${d[0]}-${result}` 
        } },
    {"name": "simple_stmt$ebnf$1", "symbols": []},
    {"name": "simple_stmt$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "_", "expr_stmt"]},
    {"name": "simple_stmt$ebnf$1", "symbols": ["simple_stmt$ebnf$1", "simple_stmt$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "simple_stmt$ebnf$2", "symbols": [{"literal":";"}], "postprocess": id},
    {"name": "simple_stmt$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "simple_stmt", "symbols": ["expr_stmt", "_", "simple_stmt$ebnf$1", "_", "simple_stmt$ebnf$2"], "postprocess": d => { console.log('last step'); console.dir(d[0]); return d[0]}},
    {"name": "expr_stmt$subexpression$1", "symbols": ["annassign"]},
    {"name": "expr_stmt$subexpression$1", "symbols": ["augassign", "testlist"]},
    {"name": "expr_stmt$subexpression$1$ebnf$1", "symbols": []},
    {"name": "expr_stmt$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":"="}, "_", "testlist_star_expr"]},
    {"name": "expr_stmt$subexpression$1$ebnf$1", "symbols": ["expr_stmt$subexpression$1$ebnf$1", "expr_stmt$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "expr_stmt$subexpression$1", "symbols": ["expr_stmt$subexpression$1$ebnf$1"]},
    {"name": "expr_stmt", "symbols": ["testlist_star_expr", "_", "expr_stmt$subexpression$1"], "postprocess": id},
    {"name": "annassign$ebnf$1$subexpression$1", "symbols": [{"literal":"="}, "_", "test"]},
    {"name": "annassign$ebnf$1", "symbols": ["annassign$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "annassign$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "annassign", "symbols": [{"literal":":"}, "_", "test", "_", "annassign$ebnf$1"], "postprocess": id},
    {"name": "testlist_star_expr$subexpression$1", "symbols": ["test"]},
    {"name": "testlist_star_expr$subexpression$1", "symbols": ["star_expr"]},
    {"name": "testlist_star_expr$ebnf$1", "symbols": []},
    {"name": "testlist_star_expr$ebnf$1$subexpression$1$subexpression$1", "symbols": ["test"]},
    {"name": "testlist_star_expr$ebnf$1$subexpression$1$subexpression$1", "symbols": ["star_expr"]},
    {"name": "testlist_star_expr$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "testlist_star_expr$ebnf$1$subexpression$1$subexpression$1"]},
    {"name": "testlist_star_expr$ebnf$1", "symbols": ["testlist_star_expr$ebnf$1", "testlist_star_expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "testlist_star_expr$ebnf$2", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "testlist_star_expr$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "testlist_star_expr", "symbols": ["testlist_star_expr$subexpression$1", "_", "testlist_star_expr$ebnf$1", "_", "testlist_star_expr$ebnf$2"], "postprocess": id},
    {"name": "augassign$subexpression$1$string$1", "symbols": [{"literal":"+"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$1"]},
    {"name": "augassign$subexpression$1$string$2", "symbols": [{"literal":"-"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$2"]},
    {"name": "augassign$subexpression$1$string$3", "symbols": [{"literal":"*"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$3"]},
    {"name": "augassign$subexpression$1$string$4", "symbols": [{"literal":"@"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$4"]},
    {"name": "augassign$subexpression$1$string$5", "symbols": [{"literal":"/"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$5"]},
    {"name": "augassign$subexpression$1$string$6", "symbols": [{"literal":"%"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$6"]},
    {"name": "augassign$subexpression$1$string$7", "symbols": [{"literal":"&"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$7"]},
    {"name": "augassign$subexpression$1$string$8", "symbols": [{"literal":"|"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$8"]},
    {"name": "augassign$subexpression$1$string$9", "symbols": [{"literal":"^"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$9"]},
    {"name": "augassign$subexpression$1$string$10", "symbols": [{"literal":"<"}, {"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$10"]},
    {"name": "augassign$subexpression$1$string$11", "symbols": [{"literal":">"}, {"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$11"]},
    {"name": "augassign$subexpression$1$string$12", "symbols": [{"literal":"*"}, {"literal":"*"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$12"]},
    {"name": "augassign$subexpression$1$string$13", "symbols": [{"literal":"/"}, {"literal":"/"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "augassign$subexpression$1", "symbols": ["augassign$subexpression$1$string$13"]},
    {"name": "augassign", "symbols": ["augassign$subexpression$1"], "postprocess": id},
    {"name": "test$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"i"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "test$ebnf$1$subexpression$1$string$2", "symbols": [{"literal":"e"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "test$ebnf$1$subexpression$1", "symbols": ["test$ebnf$1$subexpression$1$string$1", "_", "or_test", "_", "test$ebnf$1$subexpression$1$string$2", "_", "test"]},
    {"name": "test$ebnf$1", "symbols": ["test$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "test$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "test", "symbols": ["or_test", "_", "test$ebnf$1"], "postprocess": d => {console.log(`inja ${d[0].length} ${d[0]}`); return d;}},
    {"name": "test_nocond", "symbols": ["or_test"], "postprocess": id},
    {"name": "or_test$ebnf$1", "symbols": []},
    {"name": "or_test$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"o"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "or_test$ebnf$1$subexpression$1", "symbols": ["or_test$ebnf$1$subexpression$1$string$1", "_", "and_test"]},
    {"name": "or_test$ebnf$1", "symbols": ["or_test$ebnf$1", "or_test$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "or_test", "symbols": ["and_test", "_", "or_test$ebnf$1"], "postprocess": d => `${d[0]} ${d[2]}`},
    {"name": "and_test$ebnf$1", "symbols": []},
    {"name": "and_test$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"a"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "and_test$ebnf$1$subexpression$1", "symbols": ["and_test$ebnf$1$subexpression$1$string$1", "_", "not_test"]},
    {"name": "and_test$ebnf$1", "symbols": ["and_test$ebnf$1", "and_test$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "and_test", "symbols": ["not_test", "_", "and_test$ebnf$1"], "postprocess": d => `${d[0]} ${d[2]}`},
    {"name": "not_test$string$1", "symbols": [{"literal":"n"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "not_test", "symbols": ["not_test$string$1", "_", "not_test"], "postprocess": d => `not ${d[2]}`},
    {"name": "not_test", "symbols": ["comparison"], "postprocess": id},
    {"name": "comparison$ebnf$1", "symbols": []},
    {"name": "comparison$ebnf$1$subexpression$1", "symbols": ["comp_op", "expr"]},
    {"name": "comparison$ebnf$1", "symbols": ["comparison$ebnf$1", "comparison$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comparison", "symbols": ["expr", "_", "comparison$ebnf$1"], "postprocess": d => d[0]},
    {"name": "comp_op$subexpression$1", "symbols": [{"literal":"<"}]},
    {"name": "comp_op$subexpression$1", "symbols": [{"literal":">"}]},
    {"name": "comp_op$subexpression$1$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$1"]},
    {"name": "comp_op$subexpression$1$string$2", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$2"]},
    {"name": "comp_op$subexpression$1$string$3", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$3"]},
    {"name": "comp_op$subexpression$1$string$4", "symbols": [{"literal":"<"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$4"]},
    {"name": "comp_op$subexpression$1$string$5", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$5"]},
    {"name": "comp_op$subexpression$1$string$6", "symbols": [{"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$6"]},
    {"name": "comp_op$subexpression$1$string$7", "symbols": [{"literal":"n"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1$string$8", "symbols": [{"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$7", "comp_op$subexpression$1$string$8"]},
    {"name": "comp_op$subexpression$1$string$9", "symbols": [{"literal":"i"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$9"]},
    {"name": "comp_op$subexpression$1$string$10", "symbols": [{"literal":"i"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1$string$11", "symbols": [{"literal":"n"}, {"literal":"o"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_op$subexpression$1", "symbols": ["comp_op$subexpression$1$string$10", "comp_op$subexpression$1$string$11"]},
    {"name": "comp_op", "symbols": ["comp_op$subexpression$1"], "postprocess": id},
    {"name": "star_expr", "symbols": [{"literal":"*"}, "_", "expr"], "postprocess": d => `* ${d[2]}`},
    {"name": "expr$ebnf$1", "symbols": []},
    {"name": "expr$ebnf$1$subexpression$1", "symbols": [{"literal":"|"}, "xor_expr"]},
    {"name": "expr$ebnf$1", "symbols": ["expr$ebnf$1", "expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "expr", "symbols": ["xor_expr", "_", "expr$ebnf$1"], "postprocess": id},
    {"name": "xor_expr$ebnf$1", "symbols": []},
    {"name": "xor_expr$ebnf$1$subexpression$1", "symbols": [{"literal":"^"}, "and_expr"]},
    {"name": "xor_expr$ebnf$1", "symbols": ["xor_expr$ebnf$1", "xor_expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "xor_expr", "symbols": ["and_expr", "_", "xor_expr$ebnf$1"], "postprocess": id},
    {"name": "and_expr$ebnf$1", "symbols": []},
    {"name": "and_expr$ebnf$1$subexpression$1", "symbols": [{"literal":"&"}, "shift_expr"]},
    {"name": "and_expr$ebnf$1", "symbols": ["and_expr$ebnf$1", "and_expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "and_expr", "symbols": ["shift_expr", "_", "and_expr$ebnf$1"], "postprocess": id},
    {"name": "shift_expr$ebnf$1", "symbols": []},
    {"name": "shift_expr$ebnf$1$subexpression$1$subexpression$1$string$1", "symbols": [{"literal":"<"}, {"literal":"<"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "shift_expr$ebnf$1$subexpression$1$subexpression$1", "symbols": ["shift_expr$ebnf$1$subexpression$1$subexpression$1$string$1"]},
    {"name": "shift_expr$ebnf$1$subexpression$1$subexpression$1$string$2", "symbols": [{"literal":">"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "shift_expr$ebnf$1$subexpression$1$subexpression$1", "symbols": ["shift_expr$ebnf$1$subexpression$1$subexpression$1$string$2"]},
    {"name": "shift_expr$ebnf$1$subexpression$1", "symbols": ["shift_expr$ebnf$1$subexpression$1$subexpression$1", "_", "arith_expr"]},
    {"name": "shift_expr$ebnf$1", "symbols": ["shift_expr$ebnf$1", "shift_expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "shift_expr", "symbols": ["arith_expr", "_", "shift_expr$ebnf$1"], "postprocess": id},
    {"name": "arith_expr$ebnf$1", "symbols": []},
    {"name": "arith_expr$ebnf$1$subexpression$1$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "arith_expr$ebnf$1$subexpression$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "arith_expr$ebnf$1$subexpression$1", "symbols": ["arith_expr$ebnf$1$subexpression$1$subexpression$1", "_", "term"]},
    {"name": "arith_expr$ebnf$1", "symbols": ["arith_expr$ebnf$1", "arith_expr$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "arith_expr", "symbols": ["term", "_", "arith_expr$ebnf$1"], "postprocess": id},
    {"name": "term$ebnf$1", "symbols": []},
    {"name": "term$ebnf$1$subexpression$1$subexpression$1", "symbols": [{"literal":"*"}]},
    {"name": "term$ebnf$1$subexpression$1$subexpression$1", "symbols": [{"literal":"@"}]},
    {"name": "term$ebnf$1$subexpression$1$subexpression$1", "symbols": [{"literal":"/"}]},
    {"name": "term$ebnf$1$subexpression$1$subexpression$1", "symbols": [{"literal":"%"}]},
    {"name": "term$ebnf$1$subexpression$1$subexpression$1$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "term$ebnf$1$subexpression$1$subexpression$1", "symbols": ["term$ebnf$1$subexpression$1$subexpression$1$string$1"]},
    {"name": "term$ebnf$1$subexpression$1", "symbols": ["term$ebnf$1$subexpression$1$subexpression$1", "_", "factor"]},
    {"name": "term$ebnf$1", "symbols": ["term$ebnf$1", "term$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "term", "symbols": ["factor", "_", "term$ebnf$1"], "postprocess": id},
    {"name": "factor$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "factor$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "factor$subexpression$1", "symbols": [{"literal":"~"}]},
    {"name": "factor", "symbols": ["factor$subexpression$1", "_", "factor"]},
    {"name": "factor", "symbols": ["power"], "postprocess": id},
    {"name": "power$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"*"}, {"literal":"*"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "power$ebnf$1$subexpression$1", "symbols": ["power$ebnf$1$subexpression$1$string$1", "factor"]},
    {"name": "power$ebnf$1", "symbols": ["power$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "power$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "power", "symbols": ["atom_expr", "_", "power$ebnf$1"], "postprocess": id},
    {"name": "atom_expr$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"a"}, {"literal":"w"}, {"literal":"a"}, {"literal":"i"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "atom_expr$ebnf$1$subexpression$1", "symbols": ["atom_expr$ebnf$1$subexpression$1$string$1"]},
    {"name": "atom_expr$ebnf$1", "symbols": ["atom_expr$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "atom_expr$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "atom_expr$ebnf$2", "symbols": []},
    {"name": "atom_expr$ebnf$2", "symbols": ["atom_expr$ebnf$2", "trailer"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "atom_expr", "symbols": ["atom_expr$ebnf$1", "_", "atom", "_", "atom_expr$ebnf$2"], "postprocess": d => {console.log(`amir`); JSON.stringify(d); return d}},
    {"name": "atom$subexpression$1$ebnf$1", "symbols": ["testlist_comp"], "postprocess": id},
    {"name": "atom$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "atom$subexpression$1", "symbols": [{"literal":"["}, "_", "atom$subexpression$1$ebnf$1", "_", {"literal":"]"}]},
    {"name": "atom$subexpression$1", "symbols": ["name"]},
    {"name": "atom$subexpression$1", "symbols": ["number"]},
    {"name": "atom$subexpression$1$ebnf$2", "symbols": ["string"]},
    {"name": "atom$subexpression$1$ebnf$2", "symbols": ["atom$subexpression$1$ebnf$2", "string"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "atom$subexpression$1", "symbols": ["atom$subexpression$1$ebnf$2"]},
    {"name": "atom$subexpression$1$string$1", "symbols": [{"literal":"."}, {"literal":"."}, {"literal":"."}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "atom$subexpression$1", "symbols": ["atom$subexpression$1$string$1"]},
    {"name": "atom$subexpression$1$string$2", "symbols": [{"literal":"N"}, {"literal":"o"}, {"literal":"n"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "atom$subexpression$1", "symbols": ["atom$subexpression$1$string$2"]},
    {"name": "atom$subexpression$1$string$3", "symbols": [{"literal":"T"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "atom$subexpression$1", "symbols": ["atom$subexpression$1$string$3"]},
    {"name": "atom$subexpression$1$string$4", "symbols": [{"literal":"F"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "atom$subexpression$1", "symbols": ["atom$subexpression$1$string$4"]},
    {"name": "atom", "symbols": ["atom$subexpression$1"], "postprocess": id},
    {"name": "testlist_comp$subexpression$1", "symbols": ["test"]},
    {"name": "testlist_comp$subexpression$1", "symbols": ["star_expr"]},
    {"name": "testlist_comp$subexpression$2", "symbols": ["comp_for"]},
    {"name": "testlist_comp$subexpression$2$ebnf$1", "symbols": []},
    {"name": "testlist_comp$subexpression$2$ebnf$1$subexpression$1$subexpression$1", "symbols": ["test"]},
    {"name": "testlist_comp$subexpression$2$ebnf$1$subexpression$1$subexpression$1", "symbols": ["star_expr"]},
    {"name": "testlist_comp$subexpression$2$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "testlist_comp$subexpression$2$ebnf$1$subexpression$1$subexpression$1"]},
    {"name": "testlist_comp$subexpression$2$ebnf$1", "symbols": ["testlist_comp$subexpression$2$ebnf$1", "testlist_comp$subexpression$2$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "testlist_comp$subexpression$2$ebnf$2", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "testlist_comp$subexpression$2$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "testlist_comp$subexpression$2", "symbols": ["testlist_comp$subexpression$2$ebnf$1", "_", "testlist_comp$subexpression$2$ebnf$2"]},
    {"name": "testlist_comp", "symbols": ["testlist_comp$subexpression$1", "_", "testlist_comp$subexpression$2"], "postprocess": id},
    {"name": "trailer$ebnf$1", "symbols": ["arglist"], "postprocess": id},
    {"name": "trailer$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "trailer", "symbols": [{"literal":"("}, "_", "trailer$ebnf$1", "_", {"literal":")"}]},
    {"name": "trailer", "symbols": [{"literal":"["}, "_", "subscriptlist", "_", {"literal":"]"}]},
    {"name": "trailer", "symbols": [{"literal":"."}, "_", "name"], "postprocess": id},
    {"name": "subscriptlist$ebnf$1", "symbols": []},
    {"name": "subscriptlist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "subscript"]},
    {"name": "subscriptlist$ebnf$1", "symbols": ["subscriptlist$ebnf$1", "subscriptlist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "subscriptlist$ebnf$2", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "subscriptlist$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "subscriptlist", "symbols": ["subscript", "_", "subscriptlist$ebnf$1", "_", "subscriptlist$ebnf$2"], "postprocess": id},
    {"name": "subscript", "symbols": ["test"], "postprocess": id},
    {"name": "subscript$ebnf$1", "symbols": ["test"], "postprocess": id},
    {"name": "subscript$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "subscript$ebnf$2", "symbols": ["test"], "postprocess": id},
    {"name": "subscript$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "subscript$ebnf$3", "symbols": ["sliceop"], "postprocess": id},
    {"name": "subscript$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "subscript", "symbols": ["subscript$ebnf$1", "_", {"literal":":"}, "_", "subscript$ebnf$2", "_", "subscript$ebnf$3"], "postprocess": d => `${d[0]} : ${d[4]} ${d[6]}`},
    {"name": "sliceop$ebnf$1", "symbols": ["test"], "postprocess": id},
    {"name": "sliceop$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "sliceop", "symbols": [{"literal":":"}, "_", "sliceop$ebnf$1"], "postprocess": d => `: ${d[2]}`},
    {"name": "exprlist$subexpression$1", "symbols": ["expr"]},
    {"name": "exprlist$subexpression$1", "symbols": ["star_expr"]},
    {"name": "exprlist$ebnf$1", "symbols": []},
    {"name": "exprlist$ebnf$1$subexpression$1$subexpression$1", "symbols": ["expr"]},
    {"name": "exprlist$ebnf$1$subexpression$1$subexpression$1", "symbols": ["star_expr"]},
    {"name": "exprlist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "exprlist$ebnf$1$subexpression$1$subexpression$1"]},
    {"name": "exprlist$ebnf$1", "symbols": ["exprlist$ebnf$1", "exprlist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "exprlist$ebnf$2", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "exprlist$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "exprlist", "symbols": ["exprlist$subexpression$1", "_", "exprlist$ebnf$1", "_", "exprlist$ebnf$2"], "postprocess": id},
    {"name": "testlist$ebnf$1", "symbols": []},
    {"name": "testlist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "test"]},
    {"name": "testlist$ebnf$1", "symbols": ["testlist$ebnf$1", "testlist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "testlist$ebnf$2", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "testlist$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "testlist", "symbols": ["test", "_", "testlist$ebnf$1", "_", "testlist$ebnf$2"], "postprocess": id},
    {"name": "arglist$ebnf$1", "symbols": []},
    {"name": "arglist$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "argument"]},
    {"name": "arglist$ebnf$1", "symbols": ["arglist$ebnf$1", "arglist$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "arglist$ebnf$2", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "arglist$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "arglist", "symbols": ["argument", "_", "arglist$ebnf$1", "_", "arglist$ebnf$2"], "postprocess": id},
    {"name": "argument$subexpression$1$ebnf$1", "symbols": ["comp_for"], "postprocess": id},
    {"name": "argument$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "argument$subexpression$1", "symbols": ["test", "_", "argument$subexpression$1$ebnf$1"], "postprocess": d => {console.log('test'); return d;}},
    {"name": "argument$subexpression$1", "symbols": ["test", "_", {"literal":"="}, "_", "test"], "postprocess": d => `${d[0]} = ${d[4]}`},
    {"name": "argument$subexpression$1$string$1", "symbols": [{"literal":"*"}, {"literal":"*"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "argument$subexpression$1", "symbols": ["argument$subexpression$1$string$1", "_", "test"], "postprocess": d => `^ ${d[2]}`},
    {"name": "argument$subexpression$1", "symbols": [{"literal":"*"}, "_", "test"], "postprocess": d => `* ${d[2]}`},
    {"name": "argument", "symbols": ["argument$subexpression$1"]},
    {"name": "comp_iter", "symbols": ["comp_for"], "postprocess": id},
    {"name": "comp_iter", "symbols": ["comp_if"], "postprocess": id},
    {"name": "sync_comp_for$string$1", "symbols": [{"literal":"f"}, {"literal":"o"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "sync_comp_for$string$2", "symbols": [{"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "sync_comp_for$ebnf$1", "symbols": ["comp_iter"], "postprocess": id},
    {"name": "sync_comp_for$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "sync_comp_for", "symbols": ["sync_comp_for$string$1", "_", "exprlist", "_", "sync_comp_for$string$2", "_", "or_test", "_", "sync_comp_for$ebnf$1"], "postprocess": d => flatten(d)},
    {"name": "comp_for$ebnf$1$string$1", "symbols": [{"literal":"a"}, {"literal":"s"}, {"literal":"y"}, {"literal":"n"}, {"literal":"c"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_for$ebnf$1", "symbols": ["comp_for$ebnf$1$string$1"], "postprocess": id},
    {"name": "comp_for$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "comp_for", "symbols": ["comp_for$ebnf$1", "_", "sync_comp_for"], "postprocess": d => `${d[2]}`},
    {"name": "comp_if$string$1", "symbols": [{"literal":"i"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comp_if$ebnf$1", "symbols": ["comp_iter"], "postprocess": id},
    {"name": "comp_if$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "comp_if", "symbols": ["comp_if$string$1", "_", "test_nocond", "_", "comp_if$ebnf$1"], "postprocess": d => `if (${d[2]}) ${d[4]}`},
    {"name": "number$ebnf$1", "symbols": [{"literal":"-"}], "postprocess": id},
    {"name": "number$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number$ebnf$2", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$2", "symbols": ["number$ebnf$2", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$3$subexpression$1$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$3$subexpression$1$ebnf$1", "symbols": ["number$ebnf$3$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$3$subexpression$1", "symbols": [{"literal":"."}, "number$ebnf$3$subexpression$1$ebnf$1"]},
    {"name": "number$ebnf$3", "symbols": ["number$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "number$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number", "symbols": ["number$ebnf$1", "number$ebnf$2", "number$ebnf$3"], "postprocess": d => d[0]+d[1].join("")},
    {"name": "name$ebnf$1$subexpression$1", "symbols": [/[a-zA-Z_]/]},
    {"name": "name$ebnf$1", "symbols": ["name$ebnf$1$subexpression$1"]},
    {"name": "name$ebnf$1$subexpression$2", "symbols": [/[a-zA-Z_]/]},
    {"name": "name$ebnf$1", "symbols": ["name$ebnf$1", "name$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "name", "symbols": ["name$ebnf$1"], "postprocess": d =>  d[0].join("")},
    {"name": "dqstring$ebnf$1", "symbols": []},
    {"name": "dqstring$ebnf$1", "symbols": ["dqstring$ebnf$1", "dstrchar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "dqstring", "symbols": [{"literal":"\""}, "dqstring$ebnf$1", {"literal":"\""}], "postprocess": d => d[1].join("")},
    {"name": "dstrchar", "symbols": [/[^\\"\n]/], "postprocess": id},
    {"name": "string", "symbols": ["dqstring"], "postprocess": d => d.join("")},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.arithmetic = grammar;
}
})();
